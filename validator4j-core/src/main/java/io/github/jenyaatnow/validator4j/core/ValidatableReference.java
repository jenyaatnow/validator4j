package io.github.jenyaatnow.validator4j.core;

import lombok.NonNull;

import java.util.function.BiConsumer;
import java.util.function.Consumer;

/**
 * This class is the top in the inheritance hierarchy of V-classes. Each autogenerated {@code VUserDefinedClass}
 * transitively inherits this class. It contains a basic functionality to provide validation capabilities
 * for all inheritors.
 *
 * @param <TARGET> type of validated value.
 */
public abstract class ValidatableReference<TARGET> {

    /**
     * Root validation object property path constant.
     */
    protected static final String PATH_ROOT = "";

    /**
     * Path of property represented by instance of this class.
     */
    protected final String path;

    /**
     * Validated value itself.
     */
    protected final TARGET value;

    /**
     * Validation errors container.
     */
    protected final ErrorsContainer errors;

    /**
     * Operation that uses in order to reject invalid value and put {@link ValidationError} to errors container.
     */
    private final Consumer<String> reject;

    protected ValidatableReference(@NonNull final String path,
                                   final TARGET value,
                                   @NonNull final ErrorsContainer errors)
    {
        this.path = path;
        this.value = value;
        this.errors = errors;

        this.reject = message -> {
            final var error = ValidationError.of(path, message);
            this.errors.add(error);
        };
    }

    /**
     * Performs a validation by user-defined rule.
     *
     * @param validationHandler user-defined validation rule in form of {@link BiConsumer} where
     *                          1st argument is the validated value and 2nd argument is a {@link Consumer}
     *                          that should be used to reject invalid value. Example:
     *     <pre>
     *     {@code
     *     final VUser vUser = ...;
     *     vUser.getId().validate((id, reject) -> {
     *         if (id < 1) {
     *             reject.accept("Id should be positive number");
     *         }
     *     })
     *     }
     *     </pre>
     *
     * @see ValidatableObject#validate()
     */
    public final void validate(@NonNull final BiConsumer<TARGET, Consumer<String>> validationHandler) {
        validationHandler.accept(value, reject);
    }
}
